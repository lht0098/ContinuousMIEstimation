% setup behavior object

standard_fileInfo = '20200422_bl21lb21_example_data';
behav_fileInfo = strcat('example script/', datestr(date, 'mmddyyyy'));

load('/Users/brycechung/Documents/GitHub/ContinuousMIEstimation/ExampleFileandScripts/Example File and Scripts/20200422_bl21lb21_example_data.mat', 'final_cycle_times');


b = mi_data_pressure(behav_fileInfo, 'verbose', 4);

b.set_data_files('ext', '.rhd');

b.set_calibration('slope', 15.4467, 'first_file_mean', 1.5336, 'pressure_offset', 1.5336);

b.build_behavior();

b.add_cycleTimes(final_cycle_times', strcat(standard_fileInfo, datestr(date, 'mmddyyyy')), 30000);

b.process_behavior();


%% ===== ===== ===== ===== =====
% Test behavioral metrics
%  ===== ===== ===== ===== =====

%% Time | raw
start = 1;
dur= 300;
samps = 100;

x = b.get_behavior('time', 'raw', start, dur, samps);
start_samples = ceil(start*30000/1000.);
dur_samples = ceil(dur*30000/1000.);
stop_samples = start_samples + dur_samples;

ix = 1;
tmp_dat = b.data.wav_pressure{ix}(start_samples:stop_samples);
newSamples = round(linspace(1,length(tmp_dat),samps));

figure();
plot(x');

figure();
plot(b.data.wav_pressure{1}, 'k-', 'LineWidth', 2);
hold on;
scatter(newSamples+start_samples, x(1,:), 'ro');


%% Time | pca

start = 1;
dur= 300;
samps = 100;

x = b.get_behavior('time', 'raw', start, dur, samps);
start_samples = ceil(start*30000/1000.);
dur_samples = ceil(dur*30000/1000.);
stop_samples = start_samples + dur_samples;

ix = 1;
tmp_dat = b.data.wav_pressure{ix}(start_samples:stop_samples);
newSamples = round(linspace(1,length(tmp_dat),samps));

hf_wavs = figure();
% hp_wavs = plot(x', 'tag', 'rollover');
hp_wavs = plot(x', 'tag', 'rollover', 'LineWidth', 1);
title('Resampled Waveforms');

% wavs = zeros(size(hp_wavs,1),size(hp_wavs(1).XData,2));
% for i=1:size(hp_wavs,1)
%     wavs(i,:) = hp_wavs(i).YData;
% end

[~,score,~] = pca(x);
y = b.get_behavior('time', 'pca', start, dur, samps);

hf_pcas = figure();
scatter(score(:,1), score(:,2), 'k.');
hold on;
hp_pcas = scatter(y(:,1), y(:,2), 'ro');
title({'PCA Comparison' 'k. - manual | ro - library'});


% pointerBehavior.enterFcn = @(hf, cpp) set(findobj(hf, 'tag', 'rollover'), 'LineWidth', 3);
% pointerBehavior.enterFcn = @rollover_helper;
% pointerBehavior.traverseFcn = [];
% pointerBehavior.exitFcn = @(hf, cpp) set(findobj(hf, 'tag', 'rollover'), 'LineWidth', 1);
% iptSetPointerBehavior(hp_wavs, pointerBehavior);
% iptPointerManager(hf_wavs, 'enable');
% 
% function rollover_helper(hFig, currPt)
%     currPt
%     x = currPt(1) - hFig.Position(1)
%     y = currPt(2) - hFig.Position(2)
% end

%% Time | residual

start = 1;
dur= 300;
samps = 100;

x = b.get_behavior('time', 'raw', start, dur, samps);
start_samples = ceil(start*30000/1000.);
dur_samples = ceil(dur*30000/1000.);
stop_samples = start_samples + dur_samples;

ix = 1;
tmp_dat = b.data.wav_pressure{ix}(start_samples:stop_samples);
newSamples = round(linspace(1,length(tmp_dat),samps));

figure();
plot(x');
hold on;
plot(mean(x), 'k-', 'LineWidth', 5);
title('Resampled Waveforms');


y = b.get_behavior('time', 'residual', start, dur, samps);

figure();
plot(y');
hold on;
plot(mean(y), 'r-', 'LineWidt')
title('Resampled Residuals');


%% Phase | raw


%% Phase | pca


%% Phase | residual


